/**
 * Generated by orval v6.31.0 🍺
 * Do not edit manually.
 * Oshigoto Links API
 * あらゆる「おしごと」体験を共有するプラットフォーム API
 * OpenAPI spec version: 1.0.0
 */
import type {
  CreateExperiencePost201,
  CreateExperiencePostBody,
  GetExperiencePost200,
  ListExperiencePosts200,
  ListExperiencePostsParams,
  UpdateExperiencePost200,
  UpdateExperiencePostBody
} from './model'
import { customFetch } from '../../fetchApi';

/**
 * おしごと体験投稿一覧をページネーション付きで取得
 * @summary おしごと体験投稿一覧取得
 */
export type listExperiencePostsResponse = {
  data: ListExperiencePosts200;
  status: number;
}

export const getListExperiencePostsUrl = (params?: ListExperiencePostsParams,) => {

  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value === null) {
      normalizedParams.append(key, 'null');
    } else if (value !== undefined) {
      normalizedParams.append(key, value.toString());
    }
  });

  return `process.env.NEXT_PUBLIC_API_BASE_URL/experience_posts?${normalizedParams.toString()}`
}

export const listExperiencePosts = async (params?: ListExperiencePostsParams, options?: RequestInit): Promise<listExperiencePostsResponse> => {
return customFetch<Promise<listExperiencePostsResponse>>(getListExperiencePostsUrl(params),
  {      
    ...options,
    method: 'GET'
    
  }
);}


/**
 * 新しいおしごと体験投稿を作成
 * @summary おしごと体験投稿作成
 */
export type createExperiencePostResponse = {
  data: CreateExperiencePost201;
  status: number;
}

export const getCreateExperiencePostUrl = () => {


  return `process.env.NEXT_PUBLIC_API_BASE_URL/experience_posts`
}

export const createExperiencePost = async (createExperiencePostBody: CreateExperiencePostBody, options?: RequestInit): Promise<createExperiencePostResponse> => {
return customFetch<Promise<createExperiencePostResponse>>(getCreateExperiencePostUrl(),
  {      
    ...options,
    method: 'POST',
    body: JSON.stringify(
      createExperiencePostBody,)
  }
);}


/**
 * 指定されたIDのおしごと体験投稿詳細を取得
 * @summary おしごと体験投稿詳細取得
 */
export type getExperiencePostResponse = {
  data: GetExperiencePost200;
  status: number;
}

export const getGetExperiencePostUrl = (id: number,) => {


  return `process.env.NEXT_PUBLIC_API_BASE_URL/experience_posts/${id}`
}

export const getExperiencePost = async (id: number, options?: RequestInit): Promise<getExperiencePostResponse> => {
return customFetch<Promise<getExperiencePostResponse>>(getGetExperiencePostUrl(id),
  {      
    ...options,
    method: 'GET'
    
  }
);}


/**
 * 指定されたIDのおしごと体験投稿を更新
 * @summary おしごと体験投稿更新
 */
export type updateExperiencePostResponse = {
  data: UpdateExperiencePost200;
  status: number;
}

export const getUpdateExperiencePostUrl = (id: number,) => {


  return `process.env.NEXT_PUBLIC_API_BASE_URL/experience_posts/${id}`
}

export const updateExperiencePost = async (id: number,
    updateExperiencePostBody: UpdateExperiencePostBody, options?: RequestInit): Promise<updateExperiencePostResponse> => {
return customFetch<Promise<updateExperiencePostResponse>>(getUpdateExperiencePostUrl(id),
  {      
    ...options,
    method: 'PUT',
    body: JSON.stringify(
      updateExperiencePostBody,)
  }
);}


/**
 * 指定されたIDのおしごと体験投稿を削除
 * @summary おしごと体験投稿削除
 */
export type deleteExperiencePostResponse = {
  data: void;
  status: number;
}

export const getDeleteExperiencePostUrl = (id: number,) => {


  return `process.env.NEXT_PUBLIC_API_BASE_URL/experience_posts/${id}`
}

export const deleteExperiencePost = async (id: number, options?: RequestInit): Promise<deleteExperiencePostResponse> => {
return customFetch<Promise<deleteExperiencePostResponse>>(getDeleteExperiencePostUrl(id),
  {      
    ...options,
    method: 'DELETE'
    
  }
);}


